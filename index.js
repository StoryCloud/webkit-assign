'use strict';

var _ = require('lodash');
var async = require('async');
var fs = require('graceful-fs');
var path = require('path');
var lineReader = require('line-reader');

/**
 * Extension to append to files to distinguish them from their original
 * versions.
 */
var SUBEXTENSION = '.webkitassign';

/**
 * Super-duper secret namespace for variables generated by this package.
 */
var NAMESPACE = '__webkitAssign__';

/**
 * Returns `file` with a subextension (to avoid overwriting that file).
 */
var getOutputFile = function (file) {
    var directory = path.dirname(file);
    var base = path.basename(file);
    var extension = path.extname(file);
    var newName = base.substr(0, base.length - extension.length) + SUBEXTENSION + extension;
    return path.join(directory, newName);
};

/**
 * Given the string "object.foo += 5", returns the following matches:
 *
 * 1: foo
 * 2: (1 space)
 * 3: +=
 */
var getPattern = function () {
    return new RegExp([
        // Match a property dot access.
        '\\.\\s*([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)',
        // Preserve arbitrary whitespace or newlines. If there is a comment
        // here, sucks to be you. Have to capture this for replacement.
        '(\\s*)',
        // Accept any assignment operator.
        '(' + _.map([
            '=',
            '+=',
            '-=',
            '/=',
            '%=',
            '<<=',
            '>>=',
            '>>>=',
            '&=',
            '^=',
            '|='
        ], _.escapeRegExp).join('|') + ')',
        // Refuse an equality operator. Have to capture this for
        // replacement.
        '([^=])'
    ].join(''), 'g');
};

var webkitAssign = function (files, callback) {
    async.each(files, function (file, callback) {
        var names = [];
        var outputFile = getOutputFile(file);
        // We have to prepend a var statement to the output file, but since we
        // don't want to buffer the whole file into memory, we'll write it
        // twice, the second time around prepending the statement.
        var temporaryOutputFile = outputFile + '.temporary';
        var writeStream = fs.createWriteStream(temporaryOutputFile);
        lineReader.eachLine(file, function (line, last) {
            // Restore the newline for the sake of the regular expression.
            line += '\n';
            var pattern = getPattern();
            var match, name;
            // There might be multiple matches per line thanks to multiple
            // assignment.
            do {
                match = pattern.exec(line);
                if (match === null) {
                    break;
                }
                name = match[1];
                if (!_.contains(names, name)) {
                    names.push(name);
                }
            } while (true);
            // Replace this code
            //
            //   object.foo +=
            //
            // with this
            //
            //   object[__webkitAssign__foo] +=
            //
            line = line.replace(pattern, '[' + NAMESPACE + '$1]$2$3$4');
            writeStream.write(line);
            if (last) {
                writeStream.end(function () {
                    var readStream = fs.createReadStream(temporaryOutputFile);
                    var writeStream = fs.createWriteStream(outputFile);
                    // From this array
                    //
                    //   ['$foo', '$bar']
                    //
                    // produce this code
                    //
                    //   var __webkitAssign__foo = 'foo', __webkitAssign__bar = 'bar';
                    //
                    var variableInitialiser = 'var ' + _.map(names, function (name) {
                        return NAMESPACE + name + ' = ' + '\'' + name + '\'';
                    }).join(', ') + ';';
                    writeStream.write(variableInitialiser);
                    readStream.pipe(writeStream);
                    readStream.on('end', function () {
                        fs.unlink(temporaryOutputFile, callback);
                    });
                });
            }
        });
    }, callback);
};

module.exports = webkitAssign;
